<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luo.seckill.dao.OrderMapper">
  <resultMap id="BaseResultMap" type="com.luo.seckill.bean.Order">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="client_id" jdbcType="INTEGER" property="clientId" />
    <result column="creat_time" jdbcType="TIMESTAMP" property="creatTime" />
    <result column="total_amount" jdbcType="DOUBLE" property="totalAmount" />
    <result column="promotion_amount" jdbcType="DOUBLE" property="promotionAmount" />
    <result column="pay_amount" jdbcType="DOUBLE" property="payAmount" />
    <result column="pay_type" jdbcType="INTEGER" property="payType" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, client_id, creat_time, total_amount, promotion_amount, pay_amount, pay_type, 
    status
  </sql>
  <select id="selectByExample" parameterType="com.luo.seckill.bean.OrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByStoreId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
    `order`.id,
    `order`.client_id,
    `order`.creat_time,
    `order`.total_amount,
    `order`.promotion_amount,
    `order`.pay_amount,
    `order`.pay_type,
    `order`.`status`
    FROM
    `order`
    WHERE
    `order`.store_id = #{storeId,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="getTodayNum" resultType="java.lang.Integer">
    SELECT
    COUNT(*)
    FROM
    `order`
    WHERE
    `order`.creat_time &gt;= date(now())
    AND `order`.creat_time &lt;= DATE_ADD(date(now()), INTERVAL 1 DAY)
  </select>
  <select id="getYesterdayNum" resultType="java.lang.Integer">
    SELECT
    COUNT(*)
    FROM
    `order`
    WHERE
    `order`.creat_time >= DATE_SUB(DATE(NOW()), INTERVAL 1 DAY)
    AND `order`.creat_time &lt;= DATE(NOW())
  </select>
  <select id="getTodayAmount" resultType="java.lang.Double">
    SELECT
	SUM(`order`.pay_amount)
    FROM
        `order`
    WHERE
        to_days(`order`.creat_time) = to_days(now())
    AND `order`.`status` = 1
  </select>
  <select id="getOrderWithClient" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT
        `order`.id,
        `order`.client_id,
        `order`.creat_time,
        `order`.total_amount,
        `order`.promotion_amount,
        `order`.pay_amount,
        `order`.pay_type,
        `order`.`status`,
        client.`name` AS clientName,
        client.tel AS clientTel,
        client.address AS clientAddress
    FROM
        `order`
    INNER JOIN client ON `order`.client_id = client.id
    WHERE
        `order`.id = #{id,jdbcType=INTEGER}
  </select>
  <select id="getUnpaidNum" resultType="java.lang.Integer">
    SELECT
	COUNT(*)
    FROM
        `order`
    WHERE
        `order`.`status` = 0
    AND `order`.store_id = #{storeId,jdbcType=INTEGER}
  </select>

  <select id="getThisMonthNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT
        COUNT(*)
    FROM
        `order`
    WHERE
        DATE_FORMAT(`order`.creat_time, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
    AND `order`.store_id = #{storeId,jdbcType=INTEGER}
  </select>

  <select id="getPreMonthNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT
        COUNT(*)
    FROM
        `order`
    WHERE
        DATE_FORMAT(`order`.creat_time, '%Y-%m') = DATE_FORMAT(
            DATE_SUB(curdate(), INTERVAL 1 MONTH),
            '%Y-%m'
        )
    AND `order`.store_id = #{storeId,jdbcType=INTEGER}
  </select>

  <delete id="deleteById" parameterType="java.lang.Integer">
    DELETE
    FROM
        `order`
    WHERE
        `order`.id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.luo.seckill.bean.OrderExample">
    delete from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.luo.seckill.bean.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order (client_id, creat_time, total_amount, 
      promotion_amount, pay_amount, pay_type, 
      status)
    values (#{clientId,jdbcType=INTEGER}, #{creatTime,jdbcType=TIMESTAMP}, #{totalAmount,jdbcType=DOUBLE}, 
      #{promotionAmount,jdbcType=DOUBLE}, #{payAmount,jdbcType=DOUBLE}, #{payType,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.luo.seckill.bean.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="clientId != null">
        client_id,
      </if>
      <if test="creatTime != null">
        creat_time,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="promotionAmount != null">
        promotion_amount,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="clientId != null">
        #{clientId,jdbcType=INTEGER},
      </if>
      <if test="creatTime != null">
        #{creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="promotionAmount != null">
        #{promotionAmount,jdbcType=DOUBLE},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DOUBLE},
      </if>
      <if test="payType != null">
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.luo.seckill.bean.OrderExample" resultType="java.lang.Long">
    select count(*) from order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.clientId != null">
        client_id = #{record.clientId,jdbcType=INTEGER},
      </if>
      <if test="record.creatTime != null">
        creat_time = #{record.creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.promotionAmount != null">
        promotion_amount = #{record.promotionAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.payAmount != null">
        pay_amount = #{record.payAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.payType != null">
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order
    set id = #{record.id,jdbcType=INTEGER},
      client_id = #{record.clientId,jdbcType=INTEGER},
      creat_time = #{record.creatTime,jdbcType=TIMESTAMP},
      total_amount = #{record.totalAmount,jdbcType=DOUBLE},
      promotion_amount = #{record.promotionAmount,jdbcType=DOUBLE},
      pay_amount = #{record.payAmount,jdbcType=DOUBLE},
      pay_type = #{record.payType,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.luo.seckill.bean.Order">
    update order
    <set>
      <if test="clientId != null">
        client_id = #{clientId,jdbcType=INTEGER},
      </if>
      <if test="creatTime != null">
        creat_time = #{creatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="promotionAmount != null">
        promotion_amount = #{promotionAmount,jdbcType=DOUBLE},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DOUBLE},
      </if>
      <if test="payType != null">
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.luo.seckill.bean.Order">
    update order
    set client_id = #{clientId,jdbcType=INTEGER},
      creat_time = #{creatTime,jdbcType=TIMESTAMP},
      total_amount = #{totalAmount,jdbcType=DOUBLE},
      promotion_amount = #{promotionAmount,jdbcType=DOUBLE},
      pay_amount = #{payAmount,jdbcType=DOUBLE},
      pay_type = #{payType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>